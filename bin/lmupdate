#!/bin/bash
# autoload

# Detect if the script is being sourced or executed directly
# This will help us decide if we should use 'exit' or 'return'
SOURCED=0
if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
    SOURCED=1
fi

# Function to end the script properly based on how it was called
end_script() {
    local exit_code=$1
    if [ $SOURCED -eq 1 ]; then
        return $exit_code
    else
        exit $exit_code
    fi
}

# colorscheme
BLACK="\033[30m"
RED="\033[31m"
GREEN="\033[32m"
YELLOW="\033[33m"
BLUE="\033[34m"
PINK="\033[35m"
CYAN="\033[36m"
WHITE="\033[37m"
NORMAL="\033[0;39m"

ENDCOLOR="\033[0m"
HEADER="$GREEN Checking for updates in lmstack...$ENDCOLOR"
ENDMESSAGE="$GREEN Done!$ENDCOLOR"
MESSAGE_TMUX="$BLUE  üíª  Update lmtmux  üíª  $ENDCOLOR"
MESSAGE_HOMYTMUX="$BLUE  üíª  Update oh-my-tmux  üíª  $ENDCOLOR"
MESSAGE_LMZSH="$BLUE  üí≤  Update lmzsh  üí≤  $ENDCOLOR"
MESSAGE_NVIM="$BLUE  üìÇ  Update AstroNvim Config  üìÇ  $ENDCOLOR"
MESSAGE_LMZED="$BLUE  üíª  Update Zed Config  üíª  $ENDCOLOR"

# Function to display help
show_help() {
    echo -e "${GREEN}lmupdate - Utility to update lmstack components${ENDCOLOR}"
    echo -e ""
    echo -e "Usage: lmupdate [options]"
    echo -e ""
    echo -e "Options:"
    echo -e "  -h, --help       Shows this help message"
    echo -e "  -t, --tmux       Updates only lmtmux"
    echo -e "  -o, --ohmytmux   Updates only oh-my-tmux"
    echo -e "  -z, --lmzsh      Updates only lmzsh"
    echo -e "  -n, --nvim       Updates only Neovim"
    echo -e "  -d, --lmzed      Updates only lmzed"
    echo -e "  -s, --silent     Silent mode (less output)"
    echo -e ""
    echo -e "Without options, updates all components."
    end_script 0
}

# Flags to control which components to update
UPDATE_TMUX=0
UPDATE_OHMYTMUX=0
UPDATE_ZSH=0
UPDATE_NVIM=0
UPDATE_ZED=0
SILENT_MODE=0

# Parameter processing
# If there are no parameters, update everything
if [ $# -eq 0 ]; then
    UPDATE_TMUX=1
    UPDATE_OHMYTMUX=1
    UPDATE_ZSH=1
    UPDATE_NVIM=1
    UPDATE_ZED=1
else
    # Process parameters
    while [ $# -gt 0 ]; do
        case "$1" in
            -h|--help)
                show_help
                return 0
                ;;
            -t|--tmux)
                UPDATE_TMUX=1
                ;;
            -o|--ohmytmux)
                UPDATE_OHMYTMUX=1
                ;;
            -z|--zsh)
                UPDATE_ZSH=1
                ;;
            -n|--nvim)
                UPDATE_NVIM=1
                ;;
            -d|--zed)
                UPDATE_ZED=1
                ;;
            -s|--silent)
                SILENT_MODE=1
                ;;
            *)
                echo -e "${RED}Unknown option: $1${ENDCOLOR}"
                echo -e "Use 'lmupdate --help' to see available options."
                end_script 1
                ;;
        esac
        shift
    done
fi

# update_lmtmux
update_lmtmux() {
    if [ -d ~/.config/lmtmux/ ]; then
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e "$HEADER"
            echo -e ""
            echo -e "$MESSAGE_TMUX"
            echo -e ""
        fi
        cd ~/.config/lmtmux/
        lmtmux_branch=$(git branch --show-current)
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e "$GREEN  $(git pull origin $lmtmux_branch)$ENDCOLOR"
            echo -e "$GREEN  $lmtmux_branch$ENDCOLOR"
        else
            git pull origin $lmtmux_branch &> /dev/null
        fi
        lmtmux=1
    else
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e ""
            echo -e "$RED lmtmux is not installed $ENDCOLOR"
            echo -e ""
        fi
        lmtmux=0
    fi
    if [ $SILENT_MODE -eq 0 ]; then
        clear
    fi
    return "$lmtmux"
}

# update_oh-my-tmux
update_ohmytmux() {
    if [ -d ~/.tmux/ ]; then
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e "$HEADER"
            echo -e ""
            echo -e "$MESSAGE_HOMYTMUX"
            echo -e ""
        fi
        cd ~/.tmux/
        ohmytmux_branch=$(git branch --show-current)
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e "$GREEN  $(git pull origin $ohmytmux_branch)$ENDCOLOR"
            echo -e "$GREEN  $ohmytmux_branch$ENDCOLOR"
            echo -e ""
        else
            git pull origin $ohmytmux_branch &> /dev/null
        fi
        ohmytmux=1
    else
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e ""
            echo -e "$RED oh-my-tmux is not installed $ENDCOLOR"
            echo -e ""
        fi
        ohmytmux=0
    fi
    if [ $SILENT_MODE -eq 0 ]; then
        clear
    fi
    return "$ohmytmux"
}

# update_lmzsh
update_lmzsh() {
    if [ -d ~/.config/lmzsh/ ]; then
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e "$HEADER"
            echo -e ""
            echo -e "$MESSAGE_LMZSH"
            echo -e ""
        fi
        cd ~/.config/lmzsh/
        lmzsh_branch=$(git branch --show-current)
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e "$GREEN  $(git pull origin $lmzsh_branch)$ENDCOLOR"
            echo -e "$GREEN  $lmzsh_branch$ENDCOLOR"
            echo -e ""
        else
            git pull origin $lmzsh_branch &> /dev/null
        fi
        lmzsh=1
    else
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e ""
            echo -e "$RED lmzsh is not installed $ENDCOLOR"
            echo -e ""
        fi
        lmzsh=0
    fi
    if [ $SILENT_MODE -eq 0 ]; then
        clear
    fi
    return "$lmzsh"
}

# update nvim
update_nvim() {
    if [ -d ~/.config/nvim ]; then
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e "$HEADER"
            echo -e ""
            echo -e "$MESSAGE_NVIM"
            echo -e ""
        fi
        cd ~/.config/nvim/
        nvim_branch=$(git branch --show-current)
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e "$GREEN  $(git pull origin $nvim_branch)$ENDCOLOR"
            echo -e "$GREEN  $nvim_branch$ENDCOLOR"
            echo -e ""
        else
            git pull origin $nvim_branch &> /dev/null
        fi
        nvim --headless "+Lazy! update" +qa &> /dev/null
        nvim --headless "+Lazy! clean" +qa &> /dev/null
        nvim=1
    else
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e ""
            echo -e "$RED Nvim is not installed $ENDCOLOR"
            echo -e ""
        fi
        nvim=0
    fi
    if [ $SILENT_MODE -eq 0 ]; then
        clear
    fi
    return "$nvim"
}

# update zed configuration
update_lmzed() {
    if [ -d ~/.config/zed -a -d ~/.config/lmzed ]; then
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e "$HEADER"
            echo -e ""
            echo -e "$MESSAGE_LMZED"
            echo -e ""
        fi
        cd ~/.config/lmzed/
        zed_branch=$(git branch --show-current)
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e "$GREEN  $(git pull origin $zed_branch)$ENDCOLOR"
            echo -e "$GREEN  $zed_branch$ENDCOLOR"
            echo -e ""
        else
            git pull origin $zed_branch &> /dev/null
        fi
        lmzed=1
    else
        if [ $SILENT_MODE -eq 0 ]; then
            echo -e ""
            echo -e "$RED Zed is not installed $ENDCOLOR"
            echo -e ""
        fi
        lmzed=0
    fi
    if [ $SILENT_MODE -eq 0 ]; then
        clear
    fi
    return "$lmzed"
}

# Modified version of the check_update function to use flags
check_update(){
    PWD_DIR=$(pwd)
    lmtmux=0
    ohmytmux=0
    lmzsh=0
    nvim=0
    lmzed=0

    if [ $UPDATE_TMUX -eq 1 ]; then
        update_lmtmux
        lmtmux=$?
    fi

    if [ $UPDATE_OHMYTMUX -eq 1 ]; then
        update_ohmytmux
        ohmytmux=$?
    fi

    if [ $UPDATE_ZSH -eq 1 ]; then
        update_lmzsh
        lmzsh=$?
    fi

    if [ $UPDATE_NVIM -eq 1 ]; then
        update_nvim
        nvim=$?
    fi

    if [ $UPDATE_ZED -eq 1 ]; then
        update_lmzed
        lmzed=$?
    fi

    cd $PWD_DIR

    if [ $SILENT_MODE -eq 0 ]; then
        echo -e "  $ENDMESSAGE"
        echo -e ""

        if [ $UPDATE_TMUX -eq 1 ]; then
            if [ "$lmtmux" != 1 ]; then
                echo -e "$RED lmtmux is not installed ‚ùå$ENDCOLOR"
                echo -e ""
            else
                echo -e "$MESSAGE_TMUX ‚úÖ $ENDCOLOR"
                echo -e ""
            fi
        fi

        if [ $UPDATE_OHMYTMUX -eq 1 ]; then
            if [ "$ohmytmux" != 1 ]; then
                echo -e "$RED tmux and oh-my-tmux is not installed ‚ùå$ENDCOLOR"
                echo -e ""
            else
                echo -e "$MESSAGE_HOMYTMUX ‚úÖ $ENDCOLOR"
                echo -e ""
            fi
        fi

        if [ $UPDATE_ZSH -eq 1 ]; then
            if [ "$lmzsh" != 1 ]; then
                echo -e "$RED lmzsh is not installed ‚ùå$ENDCOLOR"
                echo -e ""
            else
                echo -e "$MESSAGE_LMZSH ‚úÖ $ENDCOLOR"
                echo -e ""
            fi
        fi

        if [ $UPDATE_NVIM -eq 1 ]; then
            if [ "$nvim" != 1 ]; then
                echo -e "$RED Nvim is not installed ‚ùå$ENDCOLOR"
                echo -e ""
            else
                echo -e "$MESSAGE_NVIM ‚úÖ $ENDCOLOR"
                echo -e ""
            fi
        fi

        if [ $UPDATE_ZED -eq 1 ]; then
            if [ "$lmzed" != 1 ]; then
                echo -e "$RED Zed is not installed ‚ùå $ENDCOLOR"
                echo -e ""
            else
                echo -e "$MESSAGE_LMZED ‚úÖ $ENDCOLOR"
                echo -e ""
            fi
        fi
    fi

    # If all requested updates were successful, return 0
    if [ $UPDATE_TMUX -eq 1 ] && [ "$lmtmux" != 1 ]; then
        return 1
    fi
    if [ $UPDATE_OHMYTMUX -eq 1 ] && [ "$ohmytmux" != 1 ]; then
        return 1
    fi
    if [ $UPDATE_ZSH -eq 1 ] && [ "$lmzsh" != 1 ]; then
        return 1
    fi
    if [ $UPDATE_NVIM -eq 1 ] && [ "$nvim" != 1 ]; then
        return 1
    fi
    if [ $UPDATE_ZED -eq 1 ] && [ "$lmzed" != 1 ]; then
        return 1
    fi

    return 0
}

# Run updates and check the result
if check_update ; then
    if [ $SILENT_MODE -eq 0 ]; then
        echo -e "$GREEN  Update lmstack OK ‚úÖ$ENDCOLOR"
        echo -e ""
    fi
else
    if [ $SILENT_MODE -eq 0 ]; then
        echo -e "$RED  Update lmstack FAILED ‚ùå$ENDCOLOR"
        echo -e ""
    fi
    end_script 1
fi
